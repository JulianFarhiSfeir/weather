{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.module.ts","./src/app/app.routing.ts","./src/app/core/api/weather-api.interceptor.ts","./src/app/core/api/weather-api.service.ts","./src/app/core/location.service.ts","./src/app/core/weather-manager.service.ts","./src/app/shared/components/forecasts-list/forecast-list.typings.ts","./src/app/shared/components/tabs/tab-panel/tab-panel.component.ts","./src/app/views/forecasts/forecast.resolver.ts","./src/environments/environment.ts","./src/main.ts","./src/app/app.component.css","./src/app/shared/components/tabs/tab-panel/tab-panel.component.css"],"sourcesContent":["import { Component } from '@angular/core';\nimport {SwPush, SwUpdate} from '@angular/service-worker';\nimport {interval} from 'rxjs';\nimport {HttpClient} from '@angular/common/http';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n    constructor() {\n\n    }\n}\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {FormsModule} from '@angular/forms';\n\nimport {AppComponent} from './app.component';\nimport {RouterModule} from \"@angular/router\";\nimport {routing} from \"./app.routing\";\nimport {HTTP_INTERCEPTORS, HttpClientModule} from \"@angular/common/http\";\nimport {ServiceWorkerModule} from '@angular/service-worker';\nimport {environment} from '../environments/environment';\nimport {NgOptimizedImage} from \"@angular/common\";\nimport {TabPanelComponent} from \"./shared/components/tabs/tab-panel/tab-panel.component\";\nimport {WeatherApiInterceptor} from \"./core/api/weather-api.interceptor\";\nimport { FormErrorsMessagePipe } from './shared/pipes/form-errors-message.pipe';\n\n@NgModule({\n\tdeclarations: [\n\t\tAppComponent,\n\t],\n\timports: [\n\t\tBrowserModule,\n\t\tFormsModule,\n\t\tHttpClientModule,\n\t\tRouterModule,\n\t\trouting,\n\t\tServiceWorkerModule.register('/ngsw-worker.js', {enabled: environment.production}),\n\t\tNgOptimizedImage,\n\t\tTabPanelComponent\n\t],\n\tproviders: [\n\t\t{\n\t\t\tprovide: HTTP_INTERCEPTORS,\n\t\t\tuseClass: WeatherApiInterceptor,\n\t\t\tmulti: true,\n\t\t}\n\t],\n\tbootstrap: [AppComponent]\n})\nexport class AppModule {\n}\n","import {ModuleWithProviders} from '@angular/core';\nimport {RouterModule, Routes} from '@angular/router';\nimport {forecastResolver} from \"./views/forecasts/forecast.resolver\";\n\nconst appRoutes: Routes = [\n\t{\n\t\tpath: '',\n\t\tloadComponent: () => import('./views/current-conditions/current-conditions.component').then(c => c.CurrentConditionsComponent)\n\t},\n\t{\n\t\tpath: 'forecast/:zipcode',\n\t\tresolve: {\n\t\t\tforecast: forecastResolver,\n\t\t},\n\t\tloadComponent: () => import('./views/forecasts/forecasts.component').then(c => c.ForecastsComponent)\n\t}\n];\nexport const routing: ModuleWithProviders<any> = RouterModule.forRoot(appRoutes, {});","import {Injectable} from '@angular/core';\nimport {HttpEvent, HttpHandler, HttpHeaders, HttpInterceptor, HttpParams, HttpRequest} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {environment} from \"../../../environments/environment\";\n\n@Injectable()\nexport class WeatherApiInterceptor implements HttpInterceptor {\n\n\tconstructor() {\n\t}\n\n\tintercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\t\tif (!request.url.includes(environment.weatherApiBaseUrl)) {\n\t\t\treturn next.handle(request);\n\t\t}\n\t\tlet params = request.params.set('APPID', environment.weatherApiId);\n\t\tconst clonedRequest = request.clone({\n\t\t\tparams\n\t\t})\n\t\treturn next.handle(clonedRequest);\n\t}\n}\n","import {Injectable, Signal, signal} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {ExternalCurrentCondition, ExternalForecast} from './weather-api.typings';\nimport {ConditionsAndZip} from \"../weather-manager.typings\";\nimport {environment} from \"../../../environments/environment\";\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class WeatherApiService {\n\tstatic URL = environment.weatherApiBaseUrl;\n\n\tconstructor(private http: HttpClient) {\n\t}\n\n\tpublic getConditionByZipCode(zipcode: string): Observable<ExternalCurrentCondition> {\n\t\t// Here we make a request to get the current conditions data from the API. Note the use of backticks and an expression to insert the zipcode\n\t\tconst params = new HttpParams({\n\t\t\tfromObject: {\n\t\t\t\tzip: `${zipcode},us`,\n\t\t\t\tunits: 'imperial'\n\t\t\t}\n\t\t})\n\t\treturn this.http.get<ExternalCurrentCondition>(`${WeatherApiService.URL}/weather`, {params})\n\t}\n\n\tpublic getForecast(zipcode: string): Observable<ExternalForecast> {\n\t\tconst params = new HttpParams({\n\t\t\tfromObject: {\n\t\t\t\tzip: `${zipcode},us`,\n\t\t\t\tunits: 'imperial',\n\t\t\t\tcnt: 5\n\t\t\t}\n\t\t})\n\t\t// Here we make a request to get the forecast data from the API. Note the use of backticks and an expression to insert the zipcode\n\t\treturn this.http.get<ExternalForecast>(`${WeatherApiService.URL}/forecast/daily`, {params});\n\t}\n}\n","import {Injectable} from '@angular/core';\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class LocationService {\n\tprivate LOCATIONS_STORAGE_KEY = 'locations';\n\tprivate locations: Set<string> = new Set<string>();\n\n\tconstructor() {\n\t\tlet locationsString = localStorage.getItem(this.LOCATIONS_STORAGE_KEY);\n\t\tif (locationsString){\n\t\t\tconst locations: string[] = JSON.parse(locationsString);\n\t\t\tlocations.forEach((location) => this.locations.add(location));\n\t\t}\n\t}\n\n\tpublic addLocation(zipcode: string) {\n\t\tif (this.locations.has(zipcode)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.locations.add(zipcode);\n\t\tlocalStorage.setItem(this.LOCATIONS_STORAGE_KEY, JSON.stringify(Array.from(this.locations)));\n\t}\n\n\tpublic removeLocation(zipcode: string): void {\n\t\tif (!this.locations.has(zipcode)) {\n\t\t\treturn;\n\t\t}\n\t\tthis.locations.delete(zipcode);\n\t\tlocalStorage.setItem(this.LOCATIONS_STORAGE_KEY, JSON.stringify(Array.from(this.locations)));\n\t}\n\n\tpublic getLocations(): string[] {\n\t\treturn Array.from(this.locations);\n\t}\n\n\tpublic has(zipCode: string): boolean {\n\t\treturn this.locations.has(zipCode);\n\t}\n}\n","import {Injectable, Signal, signal} from '@angular/core';\n\nimport {WeatherApiService} from \"./api/weather-api.service\";\nimport {catchError, tap} from \"rxjs/operators\";\nimport {ConditionsAndZip} from \"./weather-manager.typings\";\nimport {LocationService} from \"./location.service\";\nimport {combineLatest, Observable, of, throwError} from \"rxjs\";\nimport {environment} from \"../../environments/environment\";\n\n@Injectable({\n\tprovidedIn: 'root'\n})\nexport class WeatherManagerService {\n\tprivate currentConditions = signal<Partial<ConditionsAndZip>[]>([]);\n\tprivate ICON_URL: string = environment.weatherIconUrl;\n\n\tconstructor(\n\t\tprivate weatherApiService: WeatherApiService,\n\t\tprivate locationService: LocationService,\n\t) {\n\t\tthis.conditionsInitialization().subscribe()\n\t}\n\n\tprivate conditionsInitialization() {\n\t\tconst conditions$ = this.locationService.getLocations().map((zipcode) => this.weatherApiService.getConditionByZipCode(zipcode)\n\t\t\t.pipe(\n\t\t\t\ttap(data => this.currentConditions.mutate(conditions => {\n\t\t\t\t\tconditions.push({zipcode, data})\n\t\t\t\t}))\n\t\t\t));\n\t\treturn combineLatest(conditions$);\n\t}\n\n\n\tpublic addCurrentConditions(zipcode: string): Observable<any> {\n\t\treturn this.weatherApiService.getConditionByZipCode(zipcode)\n\t\t\t.pipe(\n\t\t\t\ttap(() => this.locationService.addLocation(zipcode)),\n\t\t\t\ttap(data => this.currentConditions.mutate(conditions => {\n\t\t\t\t\tconditions.push({zipcode, data})\n\t\t\t\t})),\n\t\t\t\tcatchError(() => {\n\t\t\t\t\treturn throwError({\n\t\t\t\t\t\tmessage: 'Unknown zip code'\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t)\n\n\t}\n\n\tpublic removeCurrentConditions(zipcode: string): void {\n\t\tthis.currentConditions.mutate(conditions => {\n\t\t\tfor (let i in conditions) {\n\t\t\t\tif (conditions[i].zipcode == zipcode)\n\t\t\t\t\tconditions.splice(+i, 1);\n\t\t\t}\n\t\t});\n\t\tthis.locationService.removeLocation(zipcode);\n\t}\n\n\tpublic getCurrentConditions(): Signal<Partial<ConditionsAndZip>[]> {\n\t\treturn this.currentConditions.asReadonly();\n\t}\n\n\tpublic getWeatherIcon(id: number): string {\n\t\tif (id >= 200 && id <= 232)\n\t\t\treturn this.ICON_URL + \"art_storm.png\";\n\t\telse if (id >= 501 && id <= 511)\n\t\t\treturn this.ICON_URL + \"art_rain.png\";\n\t\telse if (id === 500 || (id >= 520 && id <= 531))\n\t\t\treturn this.ICON_URL + \"art_light_rain.png\";\n\t\telse if (id >= 600 && id <= 622)\n\t\t\treturn this.ICON_URL + \"art_snow.png\";\n\t\telse if (id >= 801 && id <= 804)\n\t\t\treturn this.ICON_URL + \"art_clouds.png\";\n\t\telse if (id === 741 || id === 761)\n\t\t\treturn this.ICON_URL + \"art_fog.png\";\n\t\telse\n\t\t\treturn this.ICON_URL + \"art_clear.png\";\n\t}\n}\n","interface ConstructorParams {\n\tdate: Date;\n\tmain: string;\n\ttemp: { min: number; max: number };\n\ticon: string;\n}\n\nexport class Forecast {\n\tdate: Date;\n\tmain: string;\n\ttemp: {\n\t\tmin: number;\n\t\tmax: number;\n\t};\n\ticon: string;\n\n\tconstructor({date, main, temp, icon}: ConstructorParams) {\n\t\tthis.date = date;\n\t\tthis.main = main;\n\t\tthis.temp = temp;\n\t\tthis.icon = icon;\n\t}\n}","import {Component, Input} from '@angular/core';\nimport {NgIf} from \"@angular/common\";\n\n@Component({\n\tselector: 'app-tab-panel',\n\ttemplateUrl: './tab-panel.component.html',\n\tstyleUrls: ['./tab-panel.component.css'],\n\tstandalone: true,\n\timports: [\n\t\tNgIf\n\t],\n})\nexport class TabPanelComponent {\n\t@Input()\n\tpublic selected: boolean = false;\n\n\t@Input()\n\tpublic header: string;\n\n\tpublic closed: boolean = false;\n}\n","import {ResolveFn} from '@angular/router';\nimport {inject} from \"@angular/core\";\nimport {WeatherApiService} from \"../../core/api/weather-api.service\";\nimport {map} from \"rxjs/operators\";\nimport {WeatherManagerService} from \"../../core/weather-manager.service\";\nimport {Forecast} from \"../../shared/components/forecasts-list/forecast-list.typings\";\nimport {Forecasts} from \"./forecasts.typings\";\n\nexport const forecastResolver: ResolveFn<Forecasts> = (route, state) => {\n\tconst weatherApiService = inject(WeatherApiService);\n\tconst weatherManagerService = inject(WeatherManagerService);\n\tconst zipCode = route.paramMap.get('zipcode');\n\tif (!zipCode) {\n\t\treturn undefined;\n\t}\n\treturn weatherApiService.getForecast(zipCode)\n\t\t.pipe(\n\t\t\tmap((forecast) => {\n\t\t\t\tconst forecasts = forecast.list.map((condition) =>\n\t\t\t\t\tnew Forecast({\n\t\t\t\t\t\tmain: condition.weather[0].main,\n\t\t\t\t\t\ttemp: {\n\t\t\t\t\t\t\tmin: condition.temp.min,\n\t\t\t\t\t\t\tmax: condition.temp.max,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdate: new Date(condition.dt * 1000),\n\t\t\t\t\t\ticon: weatherManagerService.getWeatherIcon(condition.weather[0].id)\n\t\t\t\t\t})\n\t\t\t\t)\n\t\t\t\treturn {\n\t\t\t\t\tcityName: forecast.city.name,\n\t\t\t\t\tforecasts,\n\t\t\t\t}\n\t\t\t})\n\t\t)\n};\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false,\n  weatherApiBaseUrl: 'http://api.openweathermap.org/data/2.5',\n  weatherApiId: '5a4b2d457ecbef9eb2a71e480b947604',\n  weatherIconUrl: 'https://raw.githubusercontent.com/udacity/Sunshine-Version-2/sunshine_master/app/src/main/res/drawable-hdpi/',\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n","// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/sourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ``, \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n","// Imports\nvar ___CSS_LOADER_API_SOURCEMAP_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/sourceMaps.js\");\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, `.content {\n    padding: 20px;\n    border-right: 1px solid #ddd;\n    border-left: 1px solid #ddd;\n    border-bottom: 1px solid #ddd;\n}`, \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/shared/components/tabs/tab-panel/tab-panel.component.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,aAAa;IACb,4BAA4B;IAC5B,2BAA2B;IAC3B,6BAA6B;AACjC\",\"sourcesContent\":[\".content {\\n    padding: 20px;\\n    border-right: 1px solid #ddd;\\n    border-left: 1px solid #ddd;\\n    border-bottom: 1px solid #ddd;\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nmodule.exports = ___CSS_LOADER_EXPORT___.toString();\n"],"names":["Component","AppComponent","_class","constructor","__decorate","selector","template","__NG_CLI_RESOURCE__0","BrowserModule","NgModule","FormsModule","RouterModule","routing","HTTP_INTERCEPTORS","HttpClientModule","ServiceWorkerModule","environment","NgOptimizedImage","TabPanelComponent","WeatherApiInterceptor","AppModule","declarations","imports","register","enabled","production","providers","provide","useClass","multi","bootstrap","forecastResolver","appRoutes","path","loadComponent","then","c","CurrentConditionsComponent","resolve","forecast","ForecastsComponent","forRoot","Injectable","intercept","request","next","url","includes","weatherApiBaseUrl","handle","params","set","weatherApiId","clonedRequest","clone","HttpClient","HttpParams","WeatherApiService","WeatherApiService_1","http","getConditionByZipCode","zipcode","fromObject","zip","units","get","URL","getForecast","cnt","providedIn","LocationService","LOCATIONS_STORAGE_KEY","locations","Set","locationsString","localStorage","getItem","JSON","parse","forEach","location","add","addLocation","has","setItem","stringify","Array","from","removeLocation","delete","getLocations","zipCode","signal","catchError","tap","combineLatest","throwError","WeatherManagerService","weatherApiService","locationService","currentConditions","ICON_URL","weatherIconUrl","conditionsInitialization","subscribe","conditions$","map","pipe","data","mutate","conditions","push","addCurrentConditions","message","removeCurrentConditions","i","splice","getCurrentConditions","asReadonly","getWeatherIcon","id","Forecast","date","main","temp","icon","Input","NgIf","selected","closed","standalone","inject","route","state","weatherManagerService","paramMap","undefined","forecasts","list","condition","weather","min","max","Date","dt","cityName","city","name","enableProdMode","platformBrowserDynamic","bootstrapModule"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}